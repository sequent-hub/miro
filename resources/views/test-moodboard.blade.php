<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–∞ MoodBoard (Herd)</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .test-section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
        .success { background-color: #d4edda; border-color: #c3e6cb; }
        .error { background-color: #f8d7da; border-color: #f5c6cb; }
        button { padding: 10px 15px; margin: 5px; cursor: pointer; }
        pre { background: #f8f9fa; padding: 10px; border-radius: 3px; overflow-x: auto; }
    </style>
</head>
<body>
    <h1>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ MoodBoard (Herd)</h1>
    <p><strong>URL –ø—Ä–æ–µ–∫—Ç–∞:</strong> <code>http://miro.test</code></p>
    
    <div class="test-section">
        <h3>1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞</h3>
        <button onclick="testPackageConnection()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</button>
        <div id="connection-result"></div>
    </div>
    
    <div class="test-section">
        <h3>2. –¢–µ—Å—Ç API –º–∞—Ä—à—Ä—É—Ç–æ–≤</h3>
        <button onclick="testMoodboardList()">GET /api/moodboard/list</button>
        <button onclick="testMoodboardCreate()">POST /api/moodboard/save</button>
        <div id="api-result"></div>
    </div>
    
    <div class="test-section">
        <h3>3. –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</h3>
        <input type="file" id="test-image" accept="image/*">
        <button onclick="testImageUpload()">–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</button>
        <div id="upload-result"></div>
    </div>

    <script>
        async function testPackageConnection() {
            try {
                const response = await fetch('/test-moodboard-api');
                const data = await response.json();
                
                const resultDiv = document.getElementById('connection-result');
                if (data.success) {
                    resultDiv.innerHTML = `
                        <div class="success">
                            <h4>‚úÖ –£—Å–ø–µ—à–Ω–æ!</h4>
                            <p>${data.message}</p>
                            <pre>${JSON.stringify(data, null, 2)}</pre>
                        </div>
                    `;
                } else {
                    resultDiv.innerHTML = `
                        <div class="error">
                            <h4>‚ùå –û—à–∏–±–∫–∞!</h4>
                            <p>${data.message}</p>
                        </div>
                    `;
                }
            } catch (error) {
                document.getElementById('connection-result').innerHTML = `
                    <div class="error">
                        <h4>‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞!</h4>
                        <p>${error.message}</p>
                    </div>
                `;
            }
        }

        async function testMoodboardList() {
            try {
                const response = await fetch('/api/moodboard/list');
                const data = await response.json();
                
                const resultDiv = document.getElementById('api-result');
                resultDiv.innerHTML = `
                    <div class="success">
                        <h4>‚úÖ API –º–∞—Ä—à—Ä—É—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!</h4>
                        <pre>${JSON.stringify(data, null, 2)}</pre>
                    </div>
                `;
            } catch (error) {
                document.getElementById('api-result').innerHTML = `
                    <div class="error">
                        <h4>‚ùå –û—à–∏–±–∫–∞ API!</h4>
                        <p>${error.message}</p>
                    </div>
                `;
            }
        }

        async function testMoodboardCreate() {
            try {
                const testData = {
                    boardId: 'test-' + Date.now(),
                    boardData: {
                        name: '–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ—Å–∫–∞',
                        description: '–î–æ—Å–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                        objects: []
                    }
                };
                
                const response = await fetch('/api/moodboard/save', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || ''
                    },
                    body: JSON.stringify(testData)
                });
                
                const data = await response.json();
                
                const resultDiv = document.getElementById('api-result');
                resultDiv.innerHTML = `
                    <div class="success">
                        <h4>‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!</h4>
                        <pre>${JSON.stringify(data, null, 2)}</pre>
                    </div>
                `;
            } catch (error) {
                document.getElementById('api-result').innerHTML = `
                    <div class="error">
                        <h4>‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏!</h4>
                        <p>${error.message}</p>
                    </div>
                `;
            }
        }

        async function testImageUpload() {
            const fileInput = document.getElementById('test-image');
            const file = fileInput.files[0];
            
            if (!file) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
                return;
            }
            
            try {
                const formData = new FormData();
                formData.append('image', file);
                formData.append('name', '–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
                
                const response = await fetch('/api/images/upload', {
                    method: 'POST',
                    headers: {
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || ''
                    },
                    body: formData
                });
                
                const data = await response.json();
                
                const resultDiv = document.getElementById('upload-result');
                if (data.success) {
                    resultDiv.innerHTML = `
                        <div class="success">
                            <h4>‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!</h4>
                            <pre>${JSON.stringify(data, null, 2)}</pre>
                        </div>
                    `;
                } else {
                    resultDiv.innerHTML = `
                        <div class="error">
                            <h4>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏!</h4>
                            <p>${data.message}</p>
                        </div>
                    `;
                }
            } catch (error) {
                document.getElementById('upload-result').innerHTML = `
                    <div class="error">
                        <h4>‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞!</h4>
                        <p>${error.message}</p>
                    </div>
                `;
            }
        }
    </script>
</body>
</html>
