name: Test Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Test server connection and setup
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "=== Connected to server successfully! ==="
            echo "Current directory: $(pwd)"
            echo "Current user: $(whoami)"

            echo "=== Checking project directory ==="
            if [ -d "/var/www/miro" ]; then
              echo "✅ Project directory exists"
              cd /var/www/miro
              echo "Project path: $(pwd)"

              if [ -d ".git" ]; then
                echo "✅ Git repository found"
                echo "Current branch: $(git branch --show-current)"
                echo "Last commit: $(git log -1 --oneline)"

                # ОБНОВЛЯЕМ КОД!
                echo "=== Updating code from GitHub ==="
                sudo chown -R sequent:sequent /var/www/miro
                git fetch origin
                git reset --hard origin/main
                echo "✅ Code updated to latest commit"
                echo "New commit: $(git log -1 --oneline)"
              else
                echo "❌ Not a git repository"
                echo "Cloning repository..."
                cd /var/www
                sudo rm -rf miro
                sudo mkdir miro
                sudo chown sequent:sequent miro
                cd miro
                git clone https://github.com/sequent-hub/miro.git .
                sudo chown -R sequent:sequent .
              fi
            else
              echo "❌ Project directory does not exist"
              echo "Creating project directory and cloning..."
              sudo mkdir -p /var/www/miro
              sudo chown sequent:sequent /var/www/miro
              cd /var/www/miro
              git clone https://github.com/sequent-hub/miro.git .
              sudo chown -R sequent:sequent .
            fi

            echo "=== Updating .env file with secrets ==="
            cd /var/www/miro
            if [ ! -f ".env" ]; then
              echo "❌ .env file not found, copying from .env.example"
              cp .env.example .env
            fi

            # Функция для безопасного обновления/добавления переменных в .env
            set_env_var() {
              VAR_NAME=$1
              VAR_VALUE=$2
              FILE=$3
              if grep -q "^${VAR_NAME}=" "$FILE"; then
                sed -i "s|^${VAR_NAME}=.*|${VAR_NAME}=${VAR_VALUE}|" "$FILE"
              else
                echo "${VAR_NAME}=${VAR_VALUE}" >> "$FILE"
              fi
            }

            set_env_var "APP_KEY" "${{ secrets.APP_KEY }}" ".env"
            set_env_var "APP_URL" "${{ secrets.APP_URL }}" ".env"
            set_env_var "DB_HOST" "${{ secrets.DB_HOST }}" ".env"
            set_env_var "DB_DATABASE" "${{ secrets.DB_DATABASE }}" ".env"
            set_env_var "DB_USERNAME" "${{ secrets.DB_USERNAME }}" ".env"
            set_env_var "DB_PASSWORD" "${{ secrets.DB_PASSWORD }}" ".env"

            echo "Updated .env file:"
            grep -E "^(APP_KEY|APP_URL|DB_HOST|DB_DATABASE|DB_USERNAME|DB_PASSWORD)=" .env

            echo "=== Final project status ==="
            cd /var/www/miro
            pwd
            ls -la
            echo "Git status:"
            git status

            echo "=== Installing PHP dependencies ==="
            if command -v composer &> /dev/null; then
              echo "✅ Composer found"
              composer install --no-dev --optimize-autoloader
              echo "✅ PHP dependencies installed"
            else
              echo "❌ Composer not found"
              echo "Installing Composer..."
              curl -sS https://getcomposer.org/installer | php
              sudo mv composer.phar /usr/local/bin/composer
              composer install --no-dev --optimize-autoloader
            fi

            echo "=== Installing Node.js dependencies ==="
            if command -v npm &> /dev/null; then
              echo "✅ npm found"
              npm install
              echo "✅ Node.js dependencies installed"
            else
              echo "❌ npm not found"
              echo "Installing Node.js..."
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
              npm install
            fi

            echo "=== Building project assets ==="
            if [ -f "package.json" ]; then
              echo "✅ package.json found"
              if [ -f "vite.config.js" ]; then
                echo "✅ Vite config found"
                echo "Building with Vite..."
                npm run build
                echo "✅ Assets built successfully"

                # Проверяем результат сборки
                if [ -d "public/build" ]; then
                  echo "✅ Build directory created"
                  ls -la public/build/
                else
                  echo "❌ Build directory not found"
                fi
              else
                echo "❌ Vite config not found"
                echo "Checking for other build tools..."
                if [ -f "webpack.mix.js" ]; then
                  echo "✅ Laravel Mix found"
                  npm run dev
                elif [ -f "webpack.config.js" ]; then
                  echo "✅ Webpack config found"
                  npm run build
                else
                  echo "❌ No build tool found"
                fi
              fi
            else
              echo "❌ package.json not found"
            fi

            echo "=== Setting up Laravel ==="
            if [ -f "artisan" ]; then
              echo "✅ Laravel artisan found"

              # Очищаем кэш
              echo "Clearing Laravel caches..."
              php artisan config:clear
              php artisan cache:clear
              php artisan view:clear
              php artisan route:clear

              # Кэшируем для production
              echo "Caching for production..."
              php artisan config:cache
              php artisan route:cache
              php artisan view:cache

              echo "✅ Laravel setup completed"
            else
              echo "❌ Laravel artisan not found"
            fi

            echo "=== Setting permissions ==="
            echo "Setting proper ownership..."
            sudo chown -R www-data:www-data /var/www/miro
            sudo chmod -R 755 /var/www/miro
            sudo chmod -R 775 storage bootstrap/cache

            echo "✅ Permissions set"

            echo "=== Final project status ==="
            echo "Project structure:"
            ls -la
            echo "Build status:"
            if [ -d "public/build" ]; then
              echo "✅ Build successful"
            else
              echo "❌ Build failed or not configured"
            fi

            echo "Laravel status:"
            if [ -f "artisan" ]; then
              php artisan --version
            fi

            echo "=== Server info ==="
            uname -a
            df -h

            echo "=== Restarting services ==="
            sudo systemctl reload nginx
            sudo systemctl reload php8.2-fpm
            echo "✅ Services restarted"

            echo "=== Final status ==="
            echo "✅ Laravel site is ready!"
            echo "✅ Nginx configured"
            echo "✅ PHP-FPM running"
