"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});function t(t){const e=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(t)for(const i in t)if("default"!==i){const s=Object.getOwnPropertyDescriptor(t,i);Object.defineProperty(e,i,s.get?s:{enumerable:!0,get:()=>t[i]})}return e.default=t,Object.freeze(e)}const e=t(require("pixi.js"));class i{constructor(t,e,i){this.container=t,this.eventBus=e,this.options=i,this.objects=new Map}async init(){this.app=new e.Application({width:this.options.width,height:this.options.height,backgroundColor:this.options.backgroundColor,antialias:!0}),this.container.appendChild(this.app.view),console.log("PIXI Engine initialized")}createObject(t){const i=new e.Graphics;i.beginFill(16711680),i.drawRect(0,0,t.width||100,t.height||100),i.endFill(),i.x=t.position.x,i.y=t.position.y,i.interactive=!0,i.cursor="pointer",this.app.stage.addChild(i),this.objects.set(t.id,i),console.log("Created object:",t.type)}removeObject(t){const e=this.objects.get(t);e&&(this.app.stage.removeChild(e),this.objects.delete(t))}destroy(){this.app.destroy(!0)}}class s{constructor(t){this.eventBus=t,this.state={board:{},objects:[],selectedObjects:[],isDirty:!1}}loadBoard(t){this.state.board=t,this.state.objects=t.objects||[],this.eventBus.emit("board:loaded",t)}addObject(t){this.state.objects.push(t),this.markDirty(),this.eventBus.emit("object:created",t)}removeObject(t){this.state.objects=this.state.objects.filter(e=>e.id!==t),this.markDirty(),this.eventBus.emit("object:deleted",t)}getObjects(){return[...this.state.objects]}serialize(){return{board:{...this.state.board,objects:this.state.objects}}}markDirty(){this.state.isDirty=!0}isDirty(){return this.state.isDirty}}class o{constructor(){this.events=new Map}on(t,e){this.events.has(t)||this.events.set(t,new Set),this.events.get(t).add(e)}off(t,e){var i;null==(i=this.events.get(t))||i.delete(e)}emit(t,e){const i=this.events.get(t);i&&i.forEach(t=>t(e))}removeAllListeners(){this.events.clear()}}exports.ApiClient=class{constructor(t,e=null){this.baseUrl=t,this.authToken=e}async getBoard(t){return console.log("API: Getting board",t),{data:{id:t,name:"Demo Board",objects:[]}}}async saveBoard(t,e){return console.log("API: Saving board",t,e),{data:e}}},exports.EventBus=o,exports.MoodBoard=class{constructor(t,e={}){if(this.container="string"==typeof t?document.querySelector(t):t,!this.container)throw new Error("Container not found");this.options={boardId:null,autoSave:!1,width:this.container.clientWidth||800,height:this.container.clientHeight||600,backgroundColor:16119285,...e},this.eventBus=new o,this.state=new s(this.eventBus),this.pixi=new i(this.container,this.eventBus,this.options),this.init()}async init(){try{await this.pixi.init(),this.state.loadBoard({id:this.options.boardId||"demo",name:"Demo Board",objects:[],viewport:{x:0,y:0,zoom:1}}),console.log("MoodBoard initialized")}catch(t){console.error("MoodBoard init failed:",t)}}createObject(t,e,i={}){const s={id:"obj_"+Date.now(),type:t,position:e,width:100,height:100,properties:i,created:(new Date).toISOString()};return this.state.addObject(s),this.pixi.createObject(s),s}deleteObject(t){this.state.removeObject(t),this.pixi.removeObject(t)}get objects(){return this.state.getObjects()}get boardData(){return this.state.serialize()}destroy(){this.pixi.destroy()}},exports.PixiEngine=i,exports.StateManager=s,exports.version="1.0.0";
//# sourceMappingURL=moodboard.cjs.js.map
